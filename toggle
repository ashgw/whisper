#!/usr/bin/env zsh
# whisper-toggle.zsh — pure zsh start/stop + transcribe + copy
setopt errexit nounset pipefail

# ---------- UI ----------
autoload -Uz colors
colors
log(){  print -P "%F{4}[*]%f $*"; }
ok(){   print -P "%F{2}[ok]%f $*"; }
warn(){ print -P "%F{3}[warn]%f $*"; }
fail(){ print -P "%F{1}[err]%f $*"; exit 1; }
notify(){ command -v notify-send >/dev/null 2>&1 && notify-send -a whisper-toggle "$1" "$2" || true; }

# ---------- State & Paths ----------
RUNTIME="${XDG_RUNTIME_DIR:-/tmp}"
STATE_DIR="$RUNTIME/whisper-toggle-$UID"
CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/whisper"
mkdir -p "$STATE_DIR" "$CONF_DIR"

PID_FILE="$STATE_DIR/rec.pid"
WAV_FILE="$STATE_DIR/rec.wav"
OUT_PREFIX="$STATE_DIR/out"
TXT_FILE="$OUT_PREFIX.txt"
SRC_CACHE="$CONF_DIR/default_source"

# Lock (portable): mkdir-based
LOCKDIR="$STATE_DIR/.lock"
cleanup_lock(){ rmdir "$LOCKDIR" 2>/dev/null || true; }
if ! mkdir "$LOCKDIR" 2>/dev/null; then
  # Already running; ignore to avoid double-trigger races
  exit 0
fi
trap 'cleanup_lock' EXIT

# ---------- Binaries & Model ----------
CLI="${WHISPER_CLI:-$HOME/.local/opt/whisper.cpp/build/bin/whisper-cli}"
MODEL="${WHISPER_MODEL:-$HOME/.local/share/whisper/models/ggml-base.en.bin}"
[[ -x "$CLI" ]]   || fail "whisper-cli not found at $CLI"
[[ -s "$MODEL" ]] || fail "model missing at $MODEL"

# Recorder: prefer PipeWire
if command -v pw-record >/dev/null 2>&1; then
  REC="pw-record"
elif command -v arecord >/dev/null 2>&1; then
  REC="arecord"
else
  fail "no recorder (install pipewire-tools OR alsa-utils)"
fi

copy_clip() {
  if command -v wl-copy >/dev/null 2>&1; then wl-copy < "$1"
  elif command -v xclip   >/dev/null 2>&1; then xclip -selection clipboard -i "$1"
  else warn "no wl-copy/xclip; not copying"
  fi
}

pick_source() {
  local src="${WHISPER_SOURCE:-}"
  [[ -z "$src" && -f "$SRC_CACHE" ]] && src="$(<"$SRC_CACHE")"
  [[ -z "$src" ]] && src="$(pactl get-default-source 2>/dev/null | awk '{print $1}')"
  if [[ -z "$src" || "${WHISPER_PICK_SOURCE:-0}" = "1" ]]; then
    if command -v fzf >/dev/null 2>&1; then
      log "Pick input source (fzf)"
      src="$(pw-record --list-targets | awk 'NR>1{print $1"\t"$2}' | fzf --prompt='source > ' | awk '{print $1}')" || true
    fi
  fi
  [[ -n "$src" ]] && print -r -- "$src" > "$SRC_CACHE"
  print -r -- "$src"
}

# ---------- Toggle ----------
if [[ -f "$PID_FILE" ]]; then
  pid="$(<"$PID_FILE")"
  if kill -0 "$pid" 2>/dev/null; then
    log "Stopping recorder (PID $pid)…"
    kill "$pid" 2>/dev/null || true
    wait "$pid" 2>/dev/null || true

    if [[ ! -s "$WAV_FILE" ]]; then
      warn "no audio captured"
      rm -f "$PID_FILE" "$WAV_FILE" 2>/dev/null || true
      exit 0
    fi

    log "Transcribing…"
    args=(-m "$MODEL" -f "$WAV_FILE" -t "${WHISPER_THREADS:-$(nproc)}" -otxt -of "$OUT_PREFIX")
    case "$(basename "$MODEL")" in *".en.bin") args+=(-l en);; esac
    [[ -n "${WHISPER_LANG:-}" ]] && args+=(-l "$WHISPER_LANG")
    if [[ "${WHISPER_VAD:-0}" = "1" ]]; then
      VAD="${WHISPER_VAD_MODEL:-$HOME/.local/share/whisper/models/ggml-silero-v5.1.2.bin}"
      [[ -s "$VAD" ]] && args+=(--vad --vad-model "$VAD")
    fi
    "$CLI" "${args[@]}" >/dev/null || fail "whisper-cli failed"

    if [[ -s "$TXT_FILE" ]]; then
      copy_clip "$TXT_FILE"
      ok "Copied to clipboard ($(wc -w < "$TXT_FILE") words)"
      notify "Whisper: Transcribed" "Copied to clipboard"
    else
      fail "no output generated"
    fi

    rm -f "$PID_FILE" "$WAV_FILE" 2>/dev/null || true
    exit 0
  fi
  # stale PID
  warn "stale PID; cleaning up"
  rm -f "$PID_FILE" 2>/dev/null || true
fi

# START recording
: > "$WAV_FILE"
if [[ "$REC" == "pw-record" ]]; then
  SRC="$(pick_source)"
  if [[ -n "$SRC" ]]; then
    pw-record --target "$SRC" --rate 16000 --channels 1 --format s16 "$WAV_FILE" &
  else
    pw-record --rate 16000 --channels 1 --format s16 "$WAV_FILE" &
  fi
else
  arecord -q -f S16_LE -r 16000 -c 1 "$WAV_FILE" &
fi
echo $! > "$PID_FILE"

ok "Recording… (run again to stop)"
notify "Whisper: Recording" "Run the keybind again to stop & transcribe"
exit 0

